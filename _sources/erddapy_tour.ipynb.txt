{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# `erddapy` tour\n",
    "\n",
    "\n",
    "First we need to instantiate an `ERDDAP` `URL` constructor for the an `erddap` server.\n",
    "In this example we will use [https://data.ioos.us/gliders/erddap](https://data.ioos.us/gliders/erddap)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from erddapy import ERDDAP\n",
    "\n",
    "\n",
    "server_url = 'https://data.ioos.us/gliders/erddap'\n",
    "\n",
    "e = ERDDAP(server_url=server_url)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What are the methods/attributes available?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['download_options',\n",
       " 'get_download_url',\n",
       " 'get_info_url',\n",
       " 'get_opendap_url',\n",
       " 'get_search_url',\n",
       " 'get_var_by_attr',\n",
       " 'search_options',\n",
       " 'server_url']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[method for method in dir(e) if not method.startswith('_')]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All the `get_<methods>` will return a valid ERDDAP URL for the requested response and options."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "https://data.ioos.us/gliders/erddap/search/advanced.html?page=1&itemsPerPage=1000&protocol=(ANY)&cdm_data_type=(ANY)&institution=(ANY)&ioos_category=(ANY)&keywords=(ANY)&long_name=(ANY)&standard_name=(ANY)&variableName=(ANY)&minLon=(ANY)&maxLon=(ANY)&minLat=(ANY)&maxLat=(ANY)&minTime=(ANY)&maxTime=(ANY)&searchFor=all\n"
     ]
    }
   ],
   "source": [
    "print(e.get_search_url(response='.html', search_for='all'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are many responses available, see the docs for [griddap](http://coastwatch.pfeg.noaa.gov/erddap/griddap/documentation.html) and\n",
    "[tabledap](http://coastwatch.pfeg.noaa.gov/erddap/tabledap/documentation.html) respectively. Let's load the `csv` reponse directly with `pandas`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "\n",
    "df = pd.read_csv(e.get_search_url(response='csv', search_for='all'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'We have 267 tabledap, 0 griddap, and 0 wms endpoints.'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'We have {} tabledap, {} griddap, and {} wms endpoints.'.format(\n",
    "    len(set(df['tabledap'].dropna())),\n",
    "    len(set(df['griddap'].dropna())),\n",
    "    len(set(df['wms'].dropna()))\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can refine our search by providing some constraints."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def parse_dates(date_time, calendar='standard'):\n",
    "    \"\"\"\n",
    "    ERDDAP can take a variety of time constraints, we chose to use only\n",
    "    `seconds since 1970-01-01T00:00:00Z` so the user can parse the dates in any way they like,\n",
    "    and provide a datetime object to this function.\n",
    "\n",
    "    \"\"\"\n",
    "    from netCDF4 import netcdftime\n",
    "\n",
    "    utime = netcdftime.utime('seconds since 1970-01-01T00:00:00Z', calendar=calendar)\n",
    "    return utime.date2num(date_time)\n",
    "\n",
    "def show_iframe(src):\n",
    "    \"\"\"Helper function to show HTML returns.\"\"\"\n",
    "    from IPython.display import HTML\n",
    "    iframe = '<iframe src=\"{src}\" width=\"100%\" height=\"950\"></iframe>'.format\n",
    "    return HTML(iframe(src=src))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's narrow the search area and time span, and looking only for `sea_water_temperature`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pendulum\n",
    "\n",
    "min_time = pendulum.parse('2016-07-10T00:00:00Z')\n",
    "max_time = pendulum.parse('2017-02-10T00:00:00Z')\n",
    "min_time, max_time = parse_dates(min_time), parse_dates(max_time)\n",
    "\n",
    "min_lat, max_lat =  38.0, 41.0\n",
    "min_lon, max_lon = -72.0, -69.0\n",
    "\n",
    "standard_name = 'sea_water_temperature'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<iframe src=\"https://data.ioos.us/gliders/erddap/search/advanced.html?page=1&itemsPerPage=1000&protocol=(ANY)&cdm_data_type=(ANY)&institution=(ANY)&ioos_category=(ANY)&keywords=(ANY)&long_name=(ANY)&standard_name=sea_water_temperature&variableName=(ANY)&minLon=-72.0&maxLon=-69.0&minLat=38.0&maxLat=41.0&minTime=1468108800.0&maxTime=1486684800.0\" width=\"100%\" height=\"950\"></iframe>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kw = dict(\n",
    "    standard_name=standard_name,\n",
    "    min_lat=min_lat,\n",
    "    max_lat=max_lat,\n",
    "    min_lon=min_lon,\n",
    "    max_lon=max_lon,\n",
    "    min_time=min_time,\n",
    "    max_time=max_time\n",
    ")\n",
    "\n",
    "search_url = e.get_search_url(response='html', **kw)\n",
    "\n",
    "show_iframe(search_url)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that the search form above was correctly populated with the constraints.\n",
    "\n",
    "We change the response from `html` to `csv`,\n",
    "load it as a `DataFrame`,\n",
    "and inspect what are the `Dataset ID`s available for download.\n",
    "\n",
    "Note that the optional constraints are kept in a `dict`,\n",
    "making if easy to reuse, update or just inspect what where the original parameters used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cdm_data_type': '(ANY)',\n",
       " 'institution': '(ANY)',\n",
       " 'ioos_category': '(ANY)',\n",
       " 'itemsPerPage': 1000,\n",
       " 'keywords': '(ANY)',\n",
       " 'long_name': '(ANY)',\n",
       " 'maxLat': 41.0,\n",
       " 'maxLon': -69.0,\n",
       " 'maxTime': 1486684800.0,\n",
       " 'minLat': 38.0,\n",
       " 'minLon': -72.0,\n",
       " 'minTime': 1468108800.0,\n",
       " 'page': 1,\n",
       " 'protocol': '(ANY)',\n",
       " 'response': 'html',\n",
       " 'searchFor': None,\n",
       " 'server_url': 'https://data.ioos.us/gliders/erddap',\n",
       " 'standard_name': 'sea_water_temperature',\n",
       " 'variableName': '(ANY)'}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "e.search_options"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 5 Glider Datasets:\n",
      "blue-20160818T1448\n",
      "cp_336-20170116T1254\n",
      "silbo-20160413T1534\n",
      "sp022-20170209T1616\n",
      "whoi_406-20160902T1700\n"
     ]
    }
   ],
   "source": [
    "search_url = e.get_search_url(response='csv', **kw)\n",
    "search = pd.read_csv(search_url)\n",
    "gliders = search['Dataset ID'].values\n",
    "\n",
    "print('Found {} Glider Datasets:\\n{}'.format(len(gliders), '\\n'.join(gliders)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we know the `Dataset ID`s we can explore their metadata with the `get_info_url` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<iframe src=\"https://data.ioos.us/gliders/erddap/info/blue-20160818T1448/index.html\" width=\"100%\" height=\"950\"></iframe>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "info_url = e.get_info_url(dataset_id=gliders[0], response='html')\n",
    "\n",
    "show_iframe(src=info_url)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again, with the `csv` response, we can manipulate the metadata and find the variables that are `cdm_profile_variables` for example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Row Type</th>\n",
       "      <th>Variable Name</th>\n",
       "      <th>Attribute Name</th>\n",
       "      <th>Data Type</th>\n",
       "      <th>Value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>attribute</td>\n",
       "      <td>NC_GLOBAL</td>\n",
       "      <td>acknowledgement</td>\n",
       "      <td>String</td>\n",
       "      <td>This deployment supported by NOAA U.S. IOOS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>attribute</td>\n",
       "      <td>NC_GLOBAL</td>\n",
       "      <td>cdm_data_type</td>\n",
       "      <td>String</td>\n",
       "      <td>TrajectoryProfile</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>attribute</td>\n",
       "      <td>NC_GLOBAL</td>\n",
       "      <td>cdm_profile_variables</td>\n",
       "      <td>String</td>\n",
       "      <td>profile_id, time, latitude, longitude, time_uv...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>attribute</td>\n",
       "      <td>NC_GLOBAL</td>\n",
       "      <td>cdm_trajectory_variables</td>\n",
       "      <td>String</td>\n",
       "      <td>trajectory, wmo_id</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>attribute</td>\n",
       "      <td>NC_GLOBAL</td>\n",
       "      <td>comment</td>\n",
       "      <td>String</td>\n",
       "      <td>Glider deployed by the University of Massachus...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Row Type Variable Name            Attribute Name Data Type  \\\n",
       "0  attribute     NC_GLOBAL           acknowledgement    String   \n",
       "1  attribute     NC_GLOBAL             cdm_data_type    String   \n",
       "2  attribute     NC_GLOBAL     cdm_profile_variables    String   \n",
       "3  attribute     NC_GLOBAL  cdm_trajectory_variables    String   \n",
       "4  attribute     NC_GLOBAL                   comment    String   \n",
       "\n",
       "                                               Value  \n",
       "0        This deployment supported by NOAA U.S. IOOS  \n",
       "1                                  TrajectoryProfile  \n",
       "2  profile_id, time, latitude, longitude, time_uv...  \n",
       "3                                 trajectory, wmo_id  \n",
       "4  Glider deployed by the University of Massachus...  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "info_url = e.get_info_url(dataset_id=gliders[0], response='csv')\n",
    "\n",
    "info = pd.read_csv(info_url)\n",
    "\n",
    "info.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'profile_id, time, latitude, longitude, time_uv, lat_uv, lon_uv, u, v'"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "''.join(info.loc[info['Attribute Name'] == 'cdm_profile_variables', 'Value'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `get_var_by_attr` method provides an easy way to find variables based on their attributes. Here we check what is/are the variable(s) associated with the `standard_name` used in the search.\n",
    "\n",
    "Note that `get_var_by_attr` caches the last response in case the user needs to make multiple requests,\n",
    "but it will loose its state when a new request is made. See the times below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 150 ms, sys: 6.15 ms, total: 156 ms\n",
      "Wall time: 1.83 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['temperature']"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "# First one, slow.\n",
    "e.get_var_by_attr(\n",
    "    dataset_id='blue-20160818T1448',\n",
    "    standard_name='sea_water_temperature'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 22.7 ms, sys: 1.04 ms, total: 23.7 ms\n",
      "Wall time: 793 ms\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['salinity']"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "# Second one on the same glider, fast.\n",
    "e.get_var_by_attr(\n",
    "    dataset_id='blue-20160818T1448',\n",
    "    standard_name='sea_water_practical_salinity'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 386 ms, sys: 900 µs, total: 387 ms\n",
      "Wall time: 2.17 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['salinity']"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "# New one, slow.\n",
    "e.get_var_by_attr(\n",
    "    dataset_id='cp_336-20170116T1254',\n",
    "    standard_name='sea_water_practical_salinity'\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With Python it is easy to loop over all the `dataset_id`s for the variables with `standard_names`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "variables = [e.get_var_by_attr(dataset_id=glider, standard_name=lambda v: v is not None) for glider in gliders]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can construct a `set` with the common variables in those `dataset_id`s."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'conductivity',\n",
       " 'conductivity_qc',\n",
       " 'density',\n",
       " 'density_qc',\n",
       " 'depth',\n",
       " 'depth_qc',\n",
       " 'lat_uv',\n",
       " 'lat_uv_qc',\n",
       " 'latitude',\n",
       " 'latitude_qc',\n",
       " 'lon_uv',\n",
       " 'lon_uv_qc',\n",
       " 'longitude',\n",
       " 'longitude_qc',\n",
       " 'precise_lat',\n",
       " 'precise_lon',\n",
       " 'precise_time',\n",
       " 'precise_time_qc',\n",
       " 'pressure',\n",
       " 'pressure_qc',\n",
       " 'salinity',\n",
       " 'salinity_qc',\n",
       " 'temperature',\n",
       " 'temperature_qc',\n",
       " 'time',\n",
       " 'time_qc',\n",
       " 'time_uv',\n",
       " 'time_uv_qc',\n",
       " 'u',\n",
       " 'u_qc',\n",
       " 'v',\n",
       " 'v_qc'}"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "common_variables = set(variables[0]).intersection(*variables[1:])\n",
    "\n",
    "common_variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Last, but not least, the download endpoint!\n",
    "\n",
    "It is important to note that the download constraints are based on the variables names and not the standardized ones for the `get_search_url` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'https://data.ioos.us/gliders/erddap/tabledap/blue-20160818T1448.html?depth_qc,lon_uv,time,v_qc,longitude_qc,depth,time_qc,salinity,conductivity,salinity_qc,temperature_qc,lat_uv_qc,v,precise_lat,lon_uv_qc,pressure_qc,precise_time_qc,longitude,time_uv,latitude,u_qc,precise_time,u,density,lat_uv,precise_lon,density_qc,pressure,conductivity_qc,latitude_qc,time_uv_qc,temperature&time>=1468108800.0&time<=1486684800.0&latitude>=38.0&latitude<=41.0&longitude>=-72.0&longitude<=-69.0'"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# I don't think inequalities are supported by REST.\n",
    "# For simplicity I left them as part of the user input.\n",
    "# Some googling tells me that the \"correct\" should be:\n",
    "# time=min_time&gt=min_time&le=max_time\n",
    "# not sure if ERDDAP supports that though.\n",
    "kwargs = {\n",
    "    'time>=': min_time,\n",
    "    'time<=': max_time,\n",
    "    'latitude>=': min_lat,\n",
    "    'latitude<=': max_lat,\n",
    "    'longitude>=': min_lon,\n",
    "    'longitude<=': max_lon,\n",
    "}\n",
    "\n",
    "\n",
    "download_url = e.get_download_url(dataset_id=gliders[0], variables=common_variables, response='html', **kwargs)\n",
    "\n",
    "download_url"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'latitude<=': 41.0,\n",
       " 'latitude>=': 38.0,\n",
       " 'longitude<=': -69.0,\n",
       " 'longitude>=': -72.0,\n",
       " 'time<=': 1486684800.0,\n",
       " 'time>=': 1468108800.0}"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "e.download_options"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Putting everything in `DataFrame`s."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Failed to download silbo-20160413T1534\n",
      "Failed to download sp022-20170209T1616\n"
     ]
    }
   ],
   "source": [
    "from requests.exceptions import HTTPError\n",
    "\n",
    "\n",
    "def download_csv(url):\n",
    "    return pd.read_csv(url, index_col='time', parse_dates=True, skiprows=[1])\n",
    "\n",
    "\n",
    "dfs = {}\n",
    "for glider in gliders:\n",
    "    try:\n",
    "        download_url = e.get_download_url(dataset_id=glider, variables=common_variables, response='csv', **kwargs)\n",
    "    except HTTPError:\n",
    "        print('Failed to download {}'.format(glider))\n",
    "        continue\n",
    "    dfs.update({glider: download_csv(download_url)})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is unclear to me why ERDDAP found two datasets in the constraints provided but fails to generate an URL for the download using the same constraints."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "500 Server Error: Internal Server Error for url: https://data.ioos.us/gliders/erddap/tabledap/silbo-20160413T1534.csv?depth_qc,lon_uv,time,v_qc,longitude_qc,depth,time_qc,salinity,conductivity,salinity_qc,temperature_qc,lat_uv_qc,v,precise_lat,lon_uv_qc,pressure_qc,precise_time_qc,longitude,time_uv,latitude,u_qc,precise_time,u,density,lat_uv,precise_lon,density_qc,pressure,conductivity_qc,latitude_qc,time_uv_qc,temperature&time%3E=1468108800.0&time%3C=1486684800.0&latitude%3E=38.0&latitude%3C=41.0&longitude%3E=-72.0&longitude%3C=-69.0\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    e.get_download_url(dataset_id='silbo-20160413T1534', variables=common_variables, response='csv', **kwargs)\n",
    "except Exception as err:\n",
    "    print(err)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The glider datasets should be masked automatically but we found that is not true.\n",
    "The cell below applies the mask as described by the data QC flag."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "\n",
    "for glider in dfs.keys():\n",
    "    dfs[glider].loc[dfs[glider]['salinity_qc'] == 9, 'salinity'] = np.NaN\n",
    "    dfs[glider].loc[dfs[glider]['pressure_qc'] == 9, 'pressure'] = np.NaN\n",
    "    dfs[glider].loc[dfs[glider]['temperature_qc'] == 9, 'temperature'] = np.NaN\n",
    "    dfs[glider].loc[dfs[glider]['salinity'] <= 0, 'salinity'] = np.NaN"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally let's see some figures!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n+0Pp20n9UarT1u/lAcGE4EdwKl6HfWR3yT+TsceEfu4Rs2lMXCNnaiutNldI8pja9q71b9srx5kf\nKga8ZDYRCmbeEKnbX8z8iNwMs7vinL+W/AyEglzpwCapTmtn6wQqOIIfwSks0szsL+kdf9oGaewl\nZmOYIZOkuhXori+6ptTjb+bX7w3xX7tHUqWFT0qJPaS2V/uvXbc1uUi6fbnU4UbziOSljtLyV8wj\njVM5tEPyFfF8H9Yj+BG8qtU3Q9in4vOZdetjL5UKcqThs6QmFwamvpJa/qr02dPm14dT/Pesf/4j\nUkG2dPkLZT9roKKKriH1/680YrFUs7k092/Sv1pI718vrZ8tFeb//jPp2801toKM9AAuCXW7AKDM\nqtWVMk4y1J+fY86a//p1KXWtucu7fsqxA34qmN9upPPZP8z2vuWx9XOzDO6i+905fS9Q6p8tDZ9t\nlvqtmmi+5/Uzpeja0lnXSO1vkGq3Mu9N32qu/t6KGQgyHl8p7i48Ho+vNO8HHOPzSf9pI9VvLw2Z\nePz1wnxpxRvSF/8yS/1qt5E63y61Hez+RL5T+foNs6fA6vfM75v2lOqdLdVpY+7WazST6pxpTvs7\nncM7zdK3sCjp9mVmFzxbFOabEZ5VE83WyEUFUr120llDpOT5UsoK6cGUkv05AkHG4/HI5/OddniP\n4Edw2r1KeqObNPBVqf315rXkhWay1/4NJji73i01vjC4hrl3rpTePMlmQok9pHNHSC0uO/n3lHv0\n2CE326U/zjt+t2ujzP1m1Gf1+9KeVea1Ps9KnUe6WxfgEIIfldtn/zA73t23ySzrWvaSWQ4X10Tq\n84zUvHdwBf4v7fjK7E8QEm7u1sOipHWfmFGB/ExzpGzDzibUq59hNjNq2FmqEm2ecW+aaw67Serl\n9ndScexbL+37yaygCNb/L4DTIPhRuY0fKO34WopPlPb9aJ7pnv8nM6zvxMl6FUFhgbR6khnZ+Gna\nr79Wo5nZhnfLZ2Yy37m3ulMjANcQ/Kjc9q6VZtwlFeaZE+/aDq68gX8i+5PNpMWazaXd30ufP2f2\n+29/vdT9QberA+ACgh8AAIuUNPiZ2goAgEUIfgAALELwAwBgEYIfAACLEPwAAFiE4AcAwCIEPwAA\nFiH4AQCwCMEPAIBFCH4AACxC8AMAYBGCHwAAixD8AABYhOAHAMAiBD8AABYh+AEAsAjBDwCARQh+\nAAAsQvADAGARgh8AAIsQ/AAAWITgBwDAIgQ/AAAWIfgBALAIwQ8AgEUIfgAALELwAwBgEYIfAACL\nEPwAAFiE4AcAwCIEPwAAFiH4AQCwCMEPAIBFCH4AACxC8AMAYBGCHwAAixD8AABYhOAHAMAiBD8A\nABYh+AEAsAjBDwCARQh+AAAsQvADAGARgh8AAIsQ/AAAWITgBwDAIgQ/AAAWIfgBALAIwQ8AgEUI\nfgAALELwAwBgEYIfAACLEPwAAFiE4AcAwCIEPwAAFiH4AQCwCMEPAIBFCH4AACxC8AMAYBGCHwAA\nixD8AABYhOAHAMAiBD8AABYh+AEAsAjBDwCARQh+AAAsQvADAGARgh8AAIsQ/AAAWITgBwDAIgQ/\nAAAWIfgBALAIwQ8AgEUIfgAALELwAwBgEYIfAACLEPwAAFiE4AcAwCIEPwAAFiH4AQCwCMEPAIBF\nCH4AACxC8AMAYBGCHwAAixD8AABYhOAHAMAiBD8AABYh+AEAsAjBDwCARQh+AAAsQvADAGARgh8A\nAIsQ/AAAWITgBwDAIgQ/AAAWIfgBALAIwQ8AgEUIfgAALELwAwBgEYIfAACLEPwAAFiE4AcAwCIE\nPwAAFiH4AQCwCMEPAIBFCH4AACxC8AMAYBGCHwAAixD8AABYhOAHAMAiBD8AABYh+AEAsAjBDwCA\nRQh+AAAsQvADAGARgh8AAIsQ/AAAWITgBwDAIgQ/AAAWIfgBALAIwQ8AgEUIfgAALELwAwBgEYIf\nAACLEPwAAFiE4AcAwCIEPwAAFiH4AQCwCMEPAIBFCH4AACxC8AMAYBGCHwAAixD8AABYhOAHAMAi\nBD8AABYh+AEAsAjBDwCARQh+AAAsQvADAGARgh8AAIsQ/AAAWITgBwDAIgQ/AAAWIfgBALAIwQ8A\ngEUIfgAALELwAwBgEYIfAACLEPwAAFiE4AcAwCIEPwAAFiH4AQCwCMEPAIBFCH4AACxC8AMAYBGC\nHwAAixD8AABYhOAHAMAiBD8AABYh+AEAsAjBDwCARQh+AAAsQvADAGARgh8AAIsQ/AAAWITgBwDA\nIgQ/AAAWIfgBALAIwQ8AgEUIfgAALELwAwBgEYIfAACLEPwAAFiE4AcAwCIEPwAAFiH4AQCwCMEP\nAIBFCH4AACxC8AMAYBGCHwAAixD8AABYhOAHAMAiBD8AABYh+AEAsAjBDwCARQh+AAAsQvADAGAR\ngh8AAIsQ/AAAWITgBwDAIgQ/AAAWIfgBALAIwQ8AgEUIfgAALELwAwBgEYIfAACLEPwAAFiE4AcA\nwCIEPwAAFiH4AQCwCMEPAIBFCH4AACxC8AMAYBGCHwAAixD8AABYhOAHAMAiBD8AABYh+AEAsAjB\nDwCARQh+AAAsQvADAGARgh8AAIsQ/AAAWITgBwDAIgQ/AAAWIfgBALAIwQ8AgEUIfgAALELwAwBg\nEYIfAACLEPwAAFgktLQf8Hg8TtQBAADKZ3tJ3uTx+XxOFwIAACoIhvoBALAIwQ8AgEUIfgAALELw\nAwBgEYIfAACLEPwAAFiE4AcAwCIEPwAAFiH4AQCwyP8DClnvK7XC6LsAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f02f33ccb70>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import cartopy.crs as ccrs\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots(\n",
    "    figsize=(9, 9),\n",
    "    subplot_kw=dict(projection=ccrs.PlateCarree())\n",
    ")\n",
    "ax.coastlines(resolution='10m')\n",
    "dx = dy = 0.5\n",
    "ax.set_extent([min_lon-dx, max_lon+dx, min_lat-dy, max_lat+dy])\n",
    "\n",
    "for glider, df in dfs.items():\n",
    "    ax.plot(df['longitude'], df['latitude'], label=glider)\n",
    "\n",
    "leg = ax.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nkiSV0v8B3zxFd4m9pVoAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f02edeb3cf8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def glider_scatter(df, ax, glider):\n",
    "    ax.scatter(df['temperature'], df['salinity'],\n",
    "               s=10, alpha=0.5, label=glider)\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(9, 9))\n",
    "ax.set_ylabel('salinity')\n",
    "ax.set_xlabel('temperature')\n",
    "ax.grid(True)\n",
    "\n",
    "for glider, df in dfs.items():\n",
    "    glider_scatter(df, ax, glider)\n",
    "\n",
    "leg = ax.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extras\n",
    "\n",
    "- OPeNDAP response"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Pioneer Array is located off the coast of New England, south of Martha's Vineyard. The Continental Shelf-Slope area off the New England coast is a highly productive area and one that is located at a dynamic intersection where ocean currents meet in weather-like 'fronts', and where nutrients, pollutants, and other properties are exchanged between the coast and the deep ocean. Data from the inshore, shelf area helps to examine exchanges between the shelf and slope and the shelf ecosystem, as well as provide broader insight into the issues of air-sea gas exchange, including Carbon Dioxide. In order to provide synoptic, multi-scale observations of the outer continental shelf, shelf break region, and continental slope, the moored portion of the Pioneer Array is supplemented by six Coastal Gliders. The role of the Coastal Gliders is to monitor the mesoscale field of the slope sea and outer shelf, resolving rings, eddies and meanders from the Gulf Stream as they impinge on the shelf break front.  This dataset contains profiles of conductivity, temperature, depth, salinity and density, which are either measured or derived from the CTD measurements.\n"
     ]
    }
   ],
   "source": [
    "from netCDF4 import Dataset\n",
    "\n",
    "opendap_url = e.get_opendap_url('cp_336-20170116T1254')\n",
    "with Dataset(opendap_url) as nc:\n",
    "    print(nc.summary)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- netCDF file-like to xarray\n",
    "\n",
    "`open_dataset` will download a temporary file,\n",
    "so be careful with the constraints to avoid download serveral gigabytes!\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Server': 'nginx/1.8.1', 'Date': 'Mon, 09 Oct 2017 20:15:23 GMT', 'Content-Type': 'text/csv;charset=ISO-8859-1', 'Content-Length': '2188054', 'Connection': 'keep-alive', 'Last-Modified': 'Mon, 09 Oct 2017 20:15:22 GMT', 'xdods-server': 'dods/3.7', 'erddap-server': '1.78', 'Content-Disposition': 'attachment;filename=whoi_406-20160902T1700_aabb_f6bc_8591.csv', 'Content-Encoding': 'gzip'}"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import requests\n",
    "\n",
    "r = requests.head(download_url)\n",
    "\n",
    "r.headers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2.09 MB'"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB']\n",
    "def humansize(nbytes):\n",
    "    i = 0\n",
    "    while nbytes >= 1024 and i < len(suffixes)-1:\n",
    "        nbytes /= 1024.\n",
    "        i += 1\n",
    "    f = ('%.2f' % nbytes).rstrip('0').rstrip('.')\n",
    "    return '%s %s' % (f, suffixes[i])\n",
    "\n",
    "nbytes = float(r.headers['Content-Length'])\n",
    "humansize(nbytes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The download is just a few gzip'ed KBs in this case."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:          (row: 16232)\n",
       "Coordinates:\n",
       "    lon_uv           (row) float64 nan nan nan nan nan nan nan nan nan nan ...\n",
       "    time             (row) float64 1.485e+09 1.485e+09 1.485e+09 1.485e+09 ...\n",
       "    depth            (row) float64 0.5061 0.516 1.895 0.3473 2.084 8.584 ...\n",
       "    longitude        (row) float64 -70.4 -70.4 -70.4 -70.4 -70.4 -70.4 -70.4 ...\n",
       "    time_uv          (row) float64 nan nan nan nan nan nan nan nan nan nan ...\n",
       "    latitude         (row) float64 39.92 39.92 39.92 39.92 39.92 39.92 39.92 ...\n",
       "    lat_uv           (row) float64 nan nan nan nan nan nan nan nan nan nan ...\n",
       "Dimensions without coordinates: row\n",
       "Data variables:\n",
       "    depth_qc         (row) float64 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ...\n",
       "    v_qc             (row) float64 9.0 9.0 9.0 9.0 9.0 9.0 9.0 9.0 9.0 9.0 ...\n",
       "    longitude_qc     (row) float64 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ...\n",
       "    time_qc          (row) float64 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ...\n",
       "    salinity         (row) float64 35.45 35.45 35.45 35.45 35.45 35.46 35.46 ...\n",
       "    conductivity     (row) float64 4.281 4.284 4.287 4.287 4.289 4.29 4.29 ...\n",
       "    salinity_qc      (row) float64 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ...\n",
       "    temperature_qc   (row) float64 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ...\n",
       "    lat_uv_qc        (row) float64 9.0 9.0 9.0 9.0 9.0 9.0 9.0 9.0 9.0 9.0 ...\n",
       "    v                (row) float64 nan nan nan nan nan nan nan nan nan nan ...\n",
       "    precise_lat      (row) float64 39.92 39.92 39.92 39.92 39.92 39.92 39.92 ...\n",
       "    lon_uv_qc        (row) float64 9.0 9.0 9.0 9.0 9.0 9.0 9.0 9.0 9.0 9.0 ...\n",
       "    pressure_qc      (row) float64 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ...\n",
       "    precise_time_qc  (row) float64 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ...\n",
       "    u_qc             (row) float64 9.0 9.0 9.0 9.0 9.0 9.0 9.0 9.0 9.0 9.0 ...\n",
       "    precise_time     (row) float64 1.485e+09 1.485e+09 1.485e+09 1.485e+09 ...\n",
       "    u                (row) float64 nan nan nan nan nan nan nan nan nan nan ...\n",
       "    density          (row) float64 1.026e+03 1.026e+03 1.026e+03 1.026e+03 ...\n",
       "    precise_lon      (row) float64 -70.4 -70.4 -70.4 -70.4 -70.4 -70.4 -70.4 ...\n",
       "    density_qc       (row) float64 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ...\n",
       "    pressure         (row) float64 0.51 0.52 1.91 0.35 2.1 8.65 18.68 0.34 ...\n",
       "    conductivity_qc  (row) float64 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ...\n",
       "    latitude_qc      (row) float64 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ...\n",
       "    time_uv_qc       (row) float64 9.0 9.0 9.0 9.0 9.0 9.0 9.0 9.0 9.0 9.0 ...\n",
       "    temperature      (row) float64 14.4 14.42 14.46 14.45 14.47 14.47 14.47 ...\n",
       "Attributes:\n",
       "    acknowledgement:               Funding provided by the National Science F...\n",
       "    cdm_data_type:                 TrajectoryProfile\n",
       "    cdm_profile_variables:         profile_id, time, latitude, longitude, tim...\n",
       "    cdm_trajectory_variables:      trajectory, wmo_id\n",
       "    contributor_name:              Paul Matthias,Peter Brickley,Sheri White,D...\n",
       "    contributor_role:              CGSN Program Manager,CGSN Operations Engin...\n",
       "    Conventions:                   Unidata Dataset Discovery v1.0, COARDS, CF...\n",
       "    creator_email:                 kerfoot@marine.rutgers.edu\n",
       "    creator_name:                  John Kerfoot\n",
       "    creator_url:                   http://rucool.marine.rutgers.edu\n",
       "    date_created:                  2017-04-19T14:33:41Z\n",
       "    date_issued:                   2017-04-19T14:33:41Z\n",
       "    date_modified:                 2017-04-19T14:33:41Z\n",
       "    deployment_number:             4\n",
       "    Easternmost_Easting:           -69.9830368207\n",
       "    featureType:                   TrajectoryProfile\n",
       "    format_version:                https://github.com/ioos/ioosngdac/tree/mas...\n",
       "    geospatial_lat_max:            39.9172641723\n",
       "    geospatial_lat_min:            39.3237067304\n",
       "    geospatial_lat_units:          degrees_north\n",
       "    geospatial_lon_max:            -69.9830368207\n",
       "    geospatial_lon_min:            -71.182596026\n",
       "    geospatial_lon_units:          degrees_east\n",
       "    geospatial_vertical_max:       976.756\n",
       "    geospatial_vertical_min:       -0.0396958\n",
       "    geospatial_vertical_positive:  down\n",
       "    geospatial_vertical_units:     m\n",
       "    history:                       2017-04-19T14:33:35Z: Data Source /Users/k...\n",
       "    id:                            cp_336-20170116T1254_e698_69e3_e309\n",
       "    infoUrl:                       http://data.ioos.us/gliders/erddap/\n",
       "    institution:                   Ocean Observatories Initiative\n",
       "    ioos_dac_checksum:             f42b729c0bf19af1b7229b21350ebaaf\n",
       "    ioos_dac_completed:            False\n",
       "    keywords:                      AUVS > Autonomous Underwater Vehicles, Oce...\n",
       "    keywords_vocabulary:           GCMD Science Keywords\n",
       "    license:                       All OOI data including data from OOI core ...\n",
       "    Metadata_Conventions:          Unidata Dataset Discovery v1.0, COARDS, CF...\n",
       "    metadata_link:                 http://ooi.visualocean.net/sites/view/CP05...\n",
       "    naming_authority:              org.oceanobservatories\n",
       "    Northernmost_Northing:         39.9172641723\n",
       "    platform_type:                 Slocum Glider\n",
       "    processing_level:              Contains any/all of the following: L0 Data...\n",
       "    project:                       Ocean Observatories Initiative\n",
       "    publisher_email:               kerfoot@marine.rutgers.edu\n",
       "    publisher_name:                John Kerfoot\n",
       "    publisher_url:                 http://rucool.marine.rutgers.edu\n",
       "    references:                    http://oceanobservatories.org/\n",
       "    sea_name:                      Mid-Atlantic Bight\n",
       "    source:                        Observational data from a profiling glider\n",
       "    sourceUrl:                     (local files)\n",
       "    Southernmost_Northing:         39.3237067304\n",
       "    standard_name_vocabulary:      CF Standard Name Table v27\n",
       "    subsetVariables:               trajectory, wmo_id, profile_id, time, lati...\n",
       "    summary:                       The Pioneer Array is located off the coast...\n",
       "    time_coverage_end:             2017-02-09T23:03:25Z\n",
       "    time_coverage_start:           2017-01-16T13:03:04Z\n",
       "    title:                         cp_336-20170116T1254\n",
       "    Westernmost_Easting:           -71.182596026"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from erddapy import open_dataset\n",
    "\n",
    "download_url = e.get_download_url(dataset_id='cp_336-20170116T1254', response='nc', variables=common_variables, **kwargs)\n",
    "\n",
    "ds = open_dataset(download_url, decode_times=False)\n",
    "\n",
    "ds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<xarray.DataArray 'temperature' (row: 16232)>\n",
       "array([ 14.3976,  14.4236,  14.4596, ...,   4.4004,   4.3975,   4.3978])\n",
       "Coordinates:\n",
       "    lon_uv     (row) float64 nan nan nan nan nan nan nan nan nan nan nan nan ...\n",
       "    time       (row) float64 1.485e+09 1.485e+09 1.485e+09 1.485e+09 ...\n",
       "    depth      (row) float64 0.5061 0.516 1.895 0.3473 2.084 8.584 18.54 ...\n",
       "    longitude  (row) float64 -70.4 -70.4 -70.4 -70.4 -70.4 -70.4 -70.4 -70.4 ...\n",
       "    time_uv    (row) float64 nan nan nan nan nan nan nan nan nan nan nan nan ...\n",
       "    latitude   (row) float64 39.92 39.92 39.92 39.92 39.92 39.92 39.92 39.92 ...\n",
       "    lat_uv     (row) float64 nan nan nan nan nan nan nan nan nan nan nan nan ...\n",
       "Dimensions without coordinates: row\n",
       "Attributes:\n",
       "    _ChunkSizes:          1\n",
       "    actual_range:         [  0.          17.26519966]\n",
       "    ancillary_variables:  temperature_qc\n",
       "    colorBarMaximum:      32.0\n",
       "    colorBarMinimum:      0.0\n",
       "    instrument:           instrument_ctd\n",
       "    ioos_category:        Temperature\n",
       "    long_name:            Sea Water Temperature\n",
       "    observation_type:     measured\n",
       "    platform:             platform\n",
       "    source_variable:      sci_water_temp\n",
       "    standard_name:        sea_water_temperature\n",
       "    units:                degree_Celsius\n",
       "    valid_max:            40.0\n",
       "    valid_min:            -5.0"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds['temperature']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = ds['temperature'].values\n",
    "depth = ds['depth'].values\n",
    "\n",
    "mask = ~np.ma.masked_invalid(data).mask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = data[mask]\n",
    "depth = depth[mask]\n",
    "lon = ds['longitude'].values[mask]\n",
    "lat = ds['latitude'].values[mask]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "\n",
    "with warnings.catch_warnings():\n",
    "    warnings.simplefilter('ignore')\n",
    "    mask = depth <= 5\n",
    "\n",
    "data = data[mask]\n",
    "depth = depth[mask]\n",
    "lon = lon[mask]\n",
    "lat = lat[mask]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n8T9iWT9ZvYjeqQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f02ec1daac8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import cartopy.crs as ccrs\n",
    "\n",
    "fig, ax = plt.subplots(\n",
    "    figsize=(9, 9),\n",
    "    subplot_kw=dict(projection=ccrs.PlateCarree())\n",
    ")\n",
    "ax.coastlines(resolution='10m')\n",
    "dx = dy = 0.5\n",
    "\n",
    "extent = (ds.geospatial_lon_min-dx, ds.geospatial_lon_max+dx,\n",
    "          ds.geospatial_lat_min-dy, ds.geospatial_lat_max+dy)\n",
    "ax.set_extent(extent)\n",
    "\n",
    "cs = ax.scatter(lon, lat, c=data, s=50, alpha=0.5, edgecolor='none')\n",
    "kw = dict(orientation='vertical', fraction=0.1, shrink=0.9, extend='both')\n",
    "cbar = fig.colorbar(cs, **kw)"
   ]
  }
 ],
 "metadata": {
  "_draft": {
   "nbviewer_url": "https://gist.github.com/7e5eab16282538d11fdab7de5bd0c474"
  },
  "gist": {
   "data": {
    "description": "ERDDAP_advanced_glider_search.ipynb",
    "public": true
   },
   "id": "7e5eab16282538d11fdab7de5bd0c474"
  },
  "gist_id": "3f0f25b13ade0c64c84607bd92903d1b",
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
